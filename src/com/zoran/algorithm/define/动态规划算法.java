package com.zoran.algorithm.define;

public class 动态规划算法 {
	// 定义: 把多阶段过程转化为一系列单阶段问题，利用各阶段之间的关系，逐个求解，创立了解决这类过程优化问题的新方法――动态规划。

	//	动态规划算法通常用于求解具有某种最优性质的问题。
	//  在这类问题中，可能会有许多可行解。每一个解都对应于一个值，我们希望找到具有最优值的解。
	//	动态规划算法与分治法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。
	//	与分治法不同的是，适合于用动态规划求解的问题，经分解得到子问题往往不是互相独立的。
	//	若用分治法来解这类问题，则分解得到的子问题数目太多，有些子问题被重复计算了很多次。
	//	如果我们能够保存已解决的子问题的答案，而在需要时再找出已求得的答案，这样就可以避免大量的重复计算，节省时间。
	//	我们可以用一个表来记录所有已解的子问题的答案。不管该子问题以后是否被用到，只要它被计算过，就将其结果填入表中。
	//	这就是动态规划法的基本思路。具体的动态规划算法多种多样，但它们具有相同的填表格式。
	
	/**
	 * 1. 依赖上一次的解决答案. 比如:
	 * 	 62. 不同路径  : 在二维数组任意位置, 依赖当前位置的左侧点 + 上侧点 可行的解决方案的综合.
	 * 			path[j][i] = path[j-1][i] + path[j][i-1];
	 *   refer: com.zoran.leetcode.medium.Test34
	 */
}
